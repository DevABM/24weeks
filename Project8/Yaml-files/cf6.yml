AWSTemplateFormatVersion: '2010-09-09'
Description: VPC setup with public subnets and EC2 instance running Apache WebServer with ALB and ASG
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "10.10.0.0/16"
  
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.10.1.0/24"
      AvailabilityZone: !Select [0, !GetAZs ""]

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.10.2.0/24"
      AvailabilityZone: !Select [1, !GetAZs ""]

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.10.3.0/24"
      AvailabilityZone: !Select [2, !GetAZs ""]

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for the EC2 instance"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: "Allow HTTP traffic from anywhere"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: "Allow SSH traffic from anywhere"
          
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref MySecurityGroup
      SubnetId: !Ref MySubnet
      ImageId: ami-12345678 # Replace with your desired AMI ID
      Tags:
        - Key: Name
          Value: my-ec2-instance
      KeyName: 
        - iRef KeyName


      UserData:
        Fn::Base64: |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "Hello, World!" > /var/www/html/index.html
 
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: my-launch-template
      LaunchTemplateData:
        ImageId: 
          - iRef: 
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref MySecurityGroup
        SubnetId: !Ref MySubnet
        UserData:
          Fn::Base64: |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "Hello, World!" > /var/www/html/index.html
        Tags:
          - Key: Name
            Value: my-launch-template
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
              Encrypted: false
          - DeviceName: /dev/sdb
            Ebs:
              VolumeSize: 20
              VolumeType: gp2
              DeleteOnTermination: true

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-alb
      Scheme: internet-facing
      Subnets:
        - !Ref MySubnet
      SecurityGroups:
        - !Ref MySecurityGroup
      Tags:
        - Key: Name
          Value: my-alb

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  MyAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: my-asg
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLaunchTemplate # Assuming you have a LaunchTemplate defined
        Version: "1"
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      AvailabilityZones:
        - !Select [0, !GetAZs ""]
        - !Select [1, !GetAZs ""]
      TargetGroupARNs:
        - !Ref MyTargetGroup
