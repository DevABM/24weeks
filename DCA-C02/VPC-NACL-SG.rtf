{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red34\green35\blue37;\red179\green181\blue251;\red48\green0\blue138;
}
{\*\expandedcolortbl;;\cssrgb\c17647\c18431\c19216;\cssrgb\c75294\c76863\c98824;\cssrgb\c25098\c10588\c61176;
}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What you have is VPCs that you create within a region.\
And these are logically isolated portions of the cloud within a region.\
So they're logically isolated, not physically isolated.\
We then have availability zones. These are physical separation.\
These are essentially separate data centers.\
And then we have our subnets such as public subnets\
and private subnets.\
Public subnets are accessible to the outside world, the internet,\
whereas private subnets are not.\
And we can create both public subnets and private subnets\
in each availability zone.\
So the subnets are created within an availability zone, the AZ itself.\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 That means you can't have a single subnet that spans availability zones,\cb1 \
but you can spread your workloads across availability zones through multiple subnets.\
We can then launch our resources such as EC2 instances\
into the subnets of our VPC.\
We have a router within the VPC.\
You don't actually see it as a component but it is actually there\
and we manipulate it through updating the route table\
to determine how we want to route our traffic.\
The VPC router takes care of routing both within\
the VPC itself and then outside of the VPC.\
So to other VPCs or across some site-to-site\
links you might have with on-premises data centers, for example.\
So we control the VPC router using the route table. We can add our own routes\
in here to determine how traffic should be routed.\
The route table is used to configure the VPC router\
and we can add routes for within our VPC and outside of our VPC as well.\
Now if we want to reach the internet,\
then we need something called an internet gateway.\
The internet gateway is attached to the VPC\
and it's then used to connect out to the internet.\
We can create multiple VPCs within a region.\
So a VPC does exist within a region and we can create lots of them within our VPC.\
Now there are limits.\
So there are default limits and you can apply to extend those limits if you need to.\
Each VPC has a different block of IP addresses known as a CIDR block.\
So here we see, we've got two different CIDR blocks. One for each of our VPCs.\
CIDR stands for Classless Inter-Domain Routing.\
Now from the CIDR block, we then have our subnet IP addresses.\
So these are the blocks of addresses that we then assign\
to our resources or they get automatically assigned to our resources\
within our subnets.\
And they come from the master block, which is the CIDR block.\
So each of our VPCs then has a CIDR block\
and it has subnets that come from that block of addresses.\
Now, let's just look at the components of the VPC.\
So we talked about a VPC and what it is and what a subnet is.\
And we talked about internet gateways and how they help you route within\
the VPC and outside of the VPC.\
An egress only internet gateway is used only for IPv6.\
so it's not used for the IPv4 protocol.\
An egress only internet gateway allows your resources\
that have IPv6 addresses to connect out to the internet\
but doesn't allow traffic back in again to reach them from the internet.\
We talked about the router.\
Now, a peering connection is where you can directly peer two VPCs together\
within or across regions.\
And that means you get private routing between those VPCs\
rather than having to send the traffic out to the internet\
and then back to the other VPC.\
VPC endpoints allow you to connect to public AWS endpoints via private addresses.\
So for example if you want to connect to Amazon S3, that's a public endpoint.\
So it's available on the internet but you can connect privately to it\
using a private IPv4 address using a VPC endpoint.\
We then have NAT instances and NAT gateways. Now they both do the same thing.\
They allow your instances in private subnets\
which only have private IP addresses to be able to connect to the internet.\
So its Network Address Translation.\
The instance is an EC2 instance that you manage\
and the gateway is managed by AWS and scales seamlessly.\
If you want to set up a site-to-site link between your on-premises data center\
and AWS, you can do so by creating an AWS VPN.\
There are two principal components to a site-to-site connection.\
The customer gateway, which is your router and the configuration of\
your router in the on-premises data center,\
and then the virtual private gateway, which is the component on the AWS side.\
Direct connect is another way to connect your on-premises data centers to AWS.\
This time it uses private connections where you get very high speed\
and bandwidth and low latency and you get consistent network throughput.\
So you're not going via the internet.\
Now, security groups and network ACLs are two different types of firewalls.\
And we're going to cover those in detail within this lesson.\
So to summarize, a VPC is a virtual network dedicated to your AWS account.\
It's similar to having your own data center inside AWS.\
And it's logically isolated from other virtual networks in the AWS cloud.\
You get complete control over the virtual networking within your VPC.\
So you get to define the IP ranges, the CIDR blocks\
and the ranges that you assign to your subnets.\
You get to create your subnets and configure your route tables and gateways\
as you need to.\
And then you can launch your resources like EC2 into your VPC.\
When you create a VPC, you need to specify\
the CIDR blocks, that's the IPv4 address block for the VPC.\
So for example, here we have 10.0.0.0/16.\
A VPC will span all availability zones in the region\
and you have full control over who has access to the resources inside your VPC.\
So you can apply your policies to define role-based access control for your VPC.\
By default, you get to create up to five VPCs per region but you can extend that.\
And the default VPC is created\
in each region and that has a subnet in each availability zone within the region.\
So let's move on to security groups and network ACLs, so these are both firewalls\
which protect the network traffic that's able to connect to our EC2 instances.\
Now the network ACLs apply at the subnet level.\
So we can see here that they're actually attached to each of these subnets.\
They then apply to traffic coming into and going out of the subnet.\
So that's one really important point to remember.\
They don't apply to traffic within the subnet.\
This is only the ingress and egress traffic.\
Security groups are applied at the instance level.\
So they're actually applied to the Elastic Network Interfaces\
that are attached to each of your EC2 instances.\
Security groups can be applied to instances in any subnet.\
So for example, here we can see that security group A is applied to instances\
in multiple subnets just as security group B is as well.\
Security group rules are defined for outbound traffic and inbound traffic.\
So what we're seeing here\
is a set of rules for traffic that's coming inbound to our EC2 instance.\
Security groups only support allow rules.\
So essentially there's no such thing as a deny rule.\
What you're doing\
is you're adding rules to say this is the traffic that I want to allow\
and anything outside of what you've defined as an allow is implicitly denied.\
Each rule specifies the type, the protocol like TCP, UDP, or iCMP\
and then the actual port range.\
And then we have the source.\
A source can be an IP address or a security group ID.\
Next we have network ACLs.\
So here again we have inbound rules and outbound rules.\
Each knuckle will have an explicit deny, so these are the denies at the end.\
The rules are processed in order.\
So if an allow is found, then the traffic is allowed.\
If not then eventually it will reach the deny at the\
end of the rule set and the traffic will be denied.\
A couple of important characteristics to remember for your exam\
is that security groups support allow rules only.\
Network ACLs also support deny rules and also a security group is stateful.\
And that means that if the traffic is allowed out, outbound\
any return traffic coming in will automatically be\
allowed if it's associated with the same connection.\
Whereas with a network ACL, it's stateless.\
So you need a separate rule for outbound\
\pard\pardeftab720\partightenfactor0
\cf4 \ul \ulc4 \strokec4 and the return traffic that's coming back inbound.\
}